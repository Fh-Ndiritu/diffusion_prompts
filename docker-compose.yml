x-app: &default-app
  build:
    context: "."
    target: "app"
    args:
      - "UID=${UID:-1000}"
      - "GID=${GID:-1000}"
      - "RAILS_ENV=${RAILS_ENV:-production}"
      - "NODE_ENV=${NODE_ENV:-production}"
  depends_on:
    postgres:
      condition: "service_started"
      required: false
      # redis:
      #   condition: "service_started"
      #   required: false
  env_file:
    - ".env"
  restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
  stop_grace_period: "3s"
  tty: true
  volumes:
    - "${DOCKER_WEB_VOLUME:-./public:/app/public}"

x-assets: &default-assets
  build:
    context: "."
    target: "assets"
    args:
      - "UID=${UID:-1000}"
      - "GID=${GID:-1000}"
      - "RAILS_ENV=${RAILS_ENV:-production}"
      - "NODE_ENV=${NODE_ENV:-production}"
  env_file:
    - ".env"
  profiles: [ "assets" ]
  restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
  stop_grace_period: "3s"
  tty: true
  volumes:
    - ".:/app"

services:
  postgres:
    deploy:
      resources:
        limits:
          cpus: "${DOCKER_POSTGRES_CPUS:-0}"
          memory: "${DOCKER_POSTGRES_MEMORY:-0}"
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
    image: "postgres:16.1-bookworm"
    profiles: [ "postgres" ]
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    stop_grace_period: "3s"
    volumes:
      - "postgres:/var/lib/postgresql/data"

  # redis:
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: "${DOCKER_REDIS_CPUS:-0}"
  #         memory: "${DOCKER_REDIS_MEMORY:-0}"
  #   image: "redis:7.2.3-bookworm"
  #   profiles: ["redis"]
  #   restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
  #   stop_grace_period: "3s"
  #   volumes:
  #     - "redis:/data"

  web:
    <<: *default-app
    deploy:
      resources:
        limits:
          cpus: "${DOCKER_WEB_CPUS:-0}"
          memory: "${DOCKER_WEB_MEMORY:-0}"
    healthcheck:
      test: "${DOCKER_WEB_HEALTHCHECK_TEST:-curl localhost:8000/up}"
      interval: "60s"
      timeout: "3s"
      start_period: "5s"
      retries: 3
    ports:
      - "${DOCKER_WEB_PORT_FORWARD:-127.0.0.1:8000}:${PORT:-8000}"
    profiles: [ "web" ]
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - xpack.monitoring.enabled=false
      - xpack.graph.enabled=false
      - xpack.watcher.enabled=false
      - discovery.type=single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./docker_data/elasticsearch/data:/var/lib/elasticsearch/data
    ports:
      - 9200:9200
  # worker:
  #   <<: *default-app
  #   command: "bundle exec sidekiq -C config/sidekiq.yml"
  #   entrypoint: []
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: "${DOCKER_WORKER_CPUS:-0}"
  #         memory: "${DOCKER_WORKER_MEMORY:-0}"
  #   profiles: ["worker"]

  # cable:
  #   <<: *default-app
  #   command: "puma -p 28080 cable/config.ru"
  #   entrypoint: []
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: "${DOCKER_CABLE_CPUS:-0}"
  #         memory: "${DOCKER_CABLE_MEMORY:-0}"
  #   ports:
  #     - "${DOCKER_CABLE_PORT_FORWARD:-127.0.0.1:28080}:28080"
  #   profiles: ["cable"]

  js:
    <<: *default-assets
    command: "yarn build:css"

  css:
    <<: *default-assets
    command: "yarn build:css"

volumes:
  postgres: {}
  # redis: {}
